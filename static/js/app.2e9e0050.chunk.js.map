{"version":3,"sources":["colors.js","App.js","index.js"],"names":["theme","styles","StyleSheet","create","container","flex","backgroundColor","paddingHorizontal","header","justifyContent","flexDirection","marginTop","btnText","fontSize","fontWeight","input","paddingVertical","borderRadius","marginVertical","toDo","marginBottom","alignItems","toDoText","color","deleteBtn","registerRootComponent","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","AsyncStorage","setItem","JSON","stringify","s","getItem","parse","addToDo","newToDos","Date","now","deleteToDo","key","Platform","OS","confirm","Alert","alert","style","onPress","View","StatusBar","TouchableOpacity","Text","TextInput","returnKeyType","onSubmitEditing","value","onChangeText","payload","placeholder","ScrollView","Object","keys","map"],"mappings":"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","file":"static/js/app.2e9e0050.chunk.js","sourcesContent":["export const theme = {\r\n    bg:\"black\",\r\n    grey:\"#3A3D40\",\r\n    toDoBg:\"#5C5C60\",\r\n}","import { StatusBar } from \"expo-status-bar\";\nimport { useEffect, useState } from \"react\";\nimport {\n  StyleSheet /* React Native APIs */,\n  Text /* React Native Components */,\n  View /* React Native Components */,\n  TouchableOpacity /* React Native Components */,\n  TextInput /* React Native Components */,\n  ScrollView /* React Native Components */,\n  Alert /* React Native APIs */,\n  Platform /* React Native APIs */,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"; /* expo SDK */\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\"; /* 스토리지 key name */\n\nexport default function App() {\n  const [working, setWorking] = useState(true); /* 누른 탭 확인 */\n  const [text, setText] = useState(\"\"); /* 입력한 text 업데이트 */\n  const [toDos, setToDos] = useState({}); /* 투두리스트 */\n  useEffect(() => {\n    loadToDos();\n  }, []); /* 로드 된 투두리스트 기억 */\n  const travel = () => setWorking(false); /* 누르지 않은 탭 */\n  const work = () => setWorking(true); /* 누른 탭 */\n  const onChangeText = (payload) =>\n    setText(payload); /* 입력한 text를 payload라는 인자로 받았다 */\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(\n      STORAGE_KEY,\n      JSON.stringify(toSave)\n    ); /* 로드한 투두리스트 저장 */\n  };\n\n  // toDo 로드\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s) {\n      setToDos(JSON.parse(s));\n    }\n  };\n\n  // toDo추가\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    // const newToDos = Object.assign({}, toDos, {[Date.now()]: { text, work: working },\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n\n  // toDo 지우기 : 여기서 인자인 key는 투두리스트 item을 가져온 것이다 id로...\n  const deleteToDo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Canecl\" },\n        {\n          text: \"I'm Sure\",\n          style: \"destructive\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{ ...styles.btnText, color: working ? \"white\" : theme.grey }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              ...styles.btnText,\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <View>\n        <TextInput\n          returnKeyType=\"done\"\n          onSubmitEditing={addToDo}\n          value={text}\n          onChangeText={onChangeText}\n          placeholder={working ? \"Add a To Do\" : \"Where do you wnat to go?\"}\n          style={styles.input}\n        />\n        <ScrollView>\n          {Object.keys(toDos).map((key) =>\n            toDos[key].working === working ? (\n              <View style={styles.toDo} key={key}>\n                <Text style={styles.toDoText}>{toDos[key].text}</Text>\n                <TouchableOpacity onPress={() => deleteToDo(key)}>\n                  <Text style={styles.deleteBtn}>X</Text>\n                </TouchableOpacity>\n              </View>\n            ) : null\n          )}\n        </ScrollView>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 35,\n    fontWeight: \"600\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.grey,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 40,\n    borderRadius: 20,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n  deleteBtn: {\n    fontSize: 20,\n    color: \"red\",\n  },\n});\n\n/* 챌린지 */\n/* 1. 원래 있었던 탭 저장 */\n/* 2. 투두 완료 기능 */\n/* 3. text 수정 기능 */\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}